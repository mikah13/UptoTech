"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse5-htmlparser2-tree-adapter@7.0.0";
exports.ids = ["vendor-chunks/parse5-htmlparser2-tree-adapter@7.0.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/parse5-htmlparser2-tree-adapter@7.0.0/node_modules/parse5-htmlparser2-tree-adapter/dist/index.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse5-htmlparser2-tree-adapter@7.0.0/node_modules/parse5-htmlparser2-tree-adapter/dist/index.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adapter: () => (/* binding */ adapter),\n/* harmony export */   serializeDoctypeContent: () => (/* binding */ serializeDoctypeContent)\n/* harmony export */ });\n/* harmony import */ var parse5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parse5 */ \"(rsc)/./node_modules/.pnpm/parse5@7.1.2/node_modules/parse5/dist/index.js\");\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/.pnpm/domhandler@5.0.3/node_modules/domhandler/lib/esm/index.js\");\n\n\nfunction createTextNode(value) {\n    return new domhandler__WEBPACK_IMPORTED_MODULE_1__.Text(value);\n}\nfunction enquoteDoctypeId(id) {\n    const quote = id.includes('\"') ? \"'\" : '\"';\n    return quote + id + quote;\n}\n/** @internal */ function serializeDoctypeContent(name, publicId, systemId) {\n    let str = \"!DOCTYPE \";\n    if (name) {\n        str += name;\n    }\n    if (publicId) {\n        str += ` PUBLIC ${enquoteDoctypeId(publicId)}`;\n    } else if (systemId) {\n        str += \" SYSTEM\";\n    }\n    if (systemId) {\n        str += ` ${enquoteDoctypeId(systemId)}`;\n    }\n    return str;\n}\nconst adapter = {\n    // Re-exports from domhandler\n    isCommentNode: domhandler__WEBPACK_IMPORTED_MODULE_1__.isComment,\n    isElementNode: domhandler__WEBPACK_IMPORTED_MODULE_1__.isTag,\n    isTextNode: domhandler__WEBPACK_IMPORTED_MODULE_1__.isText,\n    //Node construction\n    createDocument () {\n        const node = new domhandler__WEBPACK_IMPORTED_MODULE_1__.Document([]);\n        node[\"x-mode\"] = parse5__WEBPACK_IMPORTED_MODULE_0__.html.DOCUMENT_MODE.NO_QUIRKS;\n        return node;\n    },\n    createDocumentFragment () {\n        return new domhandler__WEBPACK_IMPORTED_MODULE_1__.Document([]);\n    },\n    createElement (tagName, namespaceURI, attrs) {\n        const attribs = Object.create(null);\n        const attribsNamespace = Object.create(null);\n        const attribsPrefix = Object.create(null);\n        for(let i = 0; i < attrs.length; i++){\n            const attrName = attrs[i].name;\n            attribs[attrName] = attrs[i].value;\n            attribsNamespace[attrName] = attrs[i].namespace;\n            attribsPrefix[attrName] = attrs[i].prefix;\n        }\n        const node = new domhandler__WEBPACK_IMPORTED_MODULE_1__.Element(tagName, attribs, []);\n        node.namespace = namespaceURI;\n        node[\"x-attribsNamespace\"] = attribsNamespace;\n        node[\"x-attribsPrefix\"] = attribsPrefix;\n        return node;\n    },\n    createCommentNode (data) {\n        return new domhandler__WEBPACK_IMPORTED_MODULE_1__.Comment(data);\n    },\n    //Tree mutation\n    appendChild (parentNode, newNode) {\n        const prev = parentNode.children[parentNode.children.length - 1];\n        if (prev) {\n            prev.next = newNode;\n            newNode.prev = prev;\n        }\n        parentNode.children.push(newNode);\n        newNode.parent = parentNode;\n    },\n    insertBefore (parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.children.indexOf(referenceNode);\n        const { prev } = referenceNode;\n        if (prev) {\n            prev.next = newNode;\n            newNode.prev = prev;\n        }\n        referenceNode.prev = newNode;\n        newNode.next = referenceNode;\n        parentNode.children.splice(insertionIdx, 0, newNode);\n        newNode.parent = parentNode;\n    },\n    setTemplateContent (templateElement, contentElement) {\n        adapter.appendChild(templateElement, contentElement);\n    },\n    getTemplateContent (templateElement) {\n        return templateElement.children[0];\n    },\n    setDocumentType (document, name, publicId, systemId) {\n        const data = serializeDoctypeContent(name, publicId, systemId);\n        let doctypeNode = document.children.find((node)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_1__.isDirective)(node) && node.name === \"!doctype\");\n        if (doctypeNode) {\n            doctypeNode.data = data !== null && data !== void 0 ? data : null;\n        } else {\n            doctypeNode = new domhandler__WEBPACK_IMPORTED_MODULE_1__.ProcessingInstruction(\"!doctype\", data);\n            adapter.appendChild(document, doctypeNode);\n        }\n        doctypeNode[\"x-name\"] = name !== null && name !== void 0 ? name : undefined;\n        doctypeNode[\"x-publicId\"] = publicId !== null && publicId !== void 0 ? publicId : undefined;\n        doctypeNode[\"x-systemId\"] = systemId !== null && systemId !== void 0 ? systemId : undefined;\n    },\n    setDocumentMode (document, mode) {\n        document[\"x-mode\"] = mode;\n    },\n    getDocumentMode (document) {\n        return document[\"x-mode\"];\n    },\n    detachNode (node) {\n        if (node.parent) {\n            const idx = node.parent.children.indexOf(node);\n            const { prev, next } = node;\n            node.prev = null;\n            node.next = null;\n            if (prev) {\n                prev.next = next;\n            }\n            if (next) {\n                next.prev = prev;\n            }\n            node.parent.children.splice(idx, 1);\n            node.parent = null;\n        }\n    },\n    insertText (parentNode, text) {\n        const lastChild = parentNode.children[parentNode.children.length - 1];\n        if (lastChild && (0,domhandler__WEBPACK_IMPORTED_MODULE_1__.isText)(lastChild)) {\n            lastChild.data += text;\n        } else {\n            adapter.appendChild(parentNode, createTextNode(text));\n        }\n    },\n    insertTextBefore (parentNode, text, referenceNode) {\n        const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n        if (prevNode && (0,domhandler__WEBPACK_IMPORTED_MODULE_1__.isText)(prevNode)) {\n            prevNode.data += text;\n        } else {\n            adapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes (recipient, attrs) {\n        for(let i = 0; i < attrs.length; i++){\n            const attrName = attrs[i].name;\n            if (typeof recipient.attribs[attrName] === \"undefined\") {\n                recipient.attribs[attrName] = attrs[i].value;\n                recipient[\"x-attribsNamespace\"][attrName] = attrs[i].namespace;\n                recipient[\"x-attribsPrefix\"][attrName] = attrs[i].prefix;\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild (node) {\n        return node.children[0];\n    },\n    getChildNodes (node) {\n        return node.children;\n    },\n    getParentNode (node) {\n        return node.parent;\n    },\n    getAttrList (element) {\n        return element.attributes;\n    },\n    //Node data\n    getTagName (element) {\n        return element.name;\n    },\n    getNamespaceURI (element) {\n        return element.namespace;\n    },\n    getTextNodeContent (textNode) {\n        return textNode.data;\n    },\n    getCommentNodeContent (commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName (doctypeNode) {\n        var _a;\n        return (_a = doctypeNode[\"x-name\"]) !== null && _a !== void 0 ? _a : \"\";\n    },\n    getDocumentTypeNodePublicId (doctypeNode) {\n        var _a;\n        return (_a = doctypeNode[\"x-publicId\"]) !== null && _a !== void 0 ? _a : \"\";\n    },\n    getDocumentTypeNodeSystemId (doctypeNode) {\n        var _a;\n        return (_a = doctypeNode[\"x-systemId\"]) !== null && _a !== void 0 ? _a : \"\";\n    },\n    //Node types\n    isDocumentTypeNode (node) {\n        return (0,domhandler__WEBPACK_IMPORTED_MODULE_1__.isDirective)(node) && node.name === \"!doctype\";\n    },\n    // Source code location\n    setNodeSourceCodeLocation (node, location) {\n        if (location) {\n            node.startIndex = location.startOffset;\n            node.endIndex = location.endOffset;\n        }\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation (node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation (node, endLocation) {\n        if (endLocation.endOffset != null) node.endIndex = endLocation.endOffset;\n        node.sourceCodeLocation = {\n            ...node.sourceCodeLocation,\n            ...endLocation\n        };\n    }\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse5-htmlparser2-tree-adapter@7.0.0/node_modules/parse5-htmlparser2-tree-adapter/dist/index.js\n");

/***/ })

};
;